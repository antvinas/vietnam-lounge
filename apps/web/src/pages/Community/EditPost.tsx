import { useForm } from \'react-hook-form\';\nimport { useNavigate, useParams } from \'react-router-dom\';\nimport { useMutation, useQuery, useQueryClient } from \'react-query\';\nimport { FaPen, FaTag, FaFileAlt } from \'react-icons/fa\';\nimport { getPostById, updatePost, getCategories, Post, PostFormData } from \'../../api/community.api\';\nimport { useEffect } from \'react\';\n\ninterface EditPostProps {\n  isAdult?: boolean;\n}\n\nconst EditPost: React.FC<EditPostProps> = ({ isAdult = false }) => {\n  const { id } = useParams<{ id: string }>();\n  const navigate = useNavigate();\n  const queryClient = useQueryClient();\n  const { register, handleSubmit, formState: { errors }, reset } = useForm<Omit<PostFormData, \'segment\'>>();\n\n  const segment = isAdult ? \'adult\' : \'general\';\n  const redirectPath = isAdult ? \`/adult/community/post/${id}\` : \`/community/post/${id}\`;\n\n  const { data: post, isLoading: isLoadingPost } = useQuery(\n    [\'post\', id], \n    () => id ? getPostById(id) : Promise.resolve(null),\n    { enabled: !!id }\n  );\n\n  const { data: categories, isLoading: isLoadingCategories } = useQuery(\n    [\'categories\', segment], \n    () => getCategories(segment)\n  );\n\n  useEffect(() => {\n    if (post) {\n        reset({ title: post.title, category: post.category, content: post.content });\n    }\n  }, [post, reset]);\n\n  const { mutate: editPost, isLoading, isError } = useMutation(\n    (data: Omit<PostFormData, \'segment\'>) => id ? updatePost(id, data) : Promise.reject(\'No ID\'), \n    {\n        onSuccess: () => {\n            queryClient.invalidateQueries([\'posts\', segment]);\n            queryClient.invalidateQueries([\'post\', id]);\n            navigate(redirectPath);\n        },\n    }\n  );\n\n  const onSubmit = (data: Omit<PostFormData, \'segment\'>) => {\n    editPost(data);\n  };\n\n  if (isLoadingPost) return <div>Loading post...</div>;\n\n  return (\n    <div className=\"max-w-3xl mx-auto bg-white dark:bg-gray-800 rounded-lg shadow-xl p-8\">\n      <h1 className=\"text-3xl font-bold mb-6 text-gray-900 dark:text-white\">Edit Post</h1>\n      {isError && <div className=\"bg-red-100 text-red-700 p-3 rounded-lg mb-4\">Failed to update the post. Please try again.</div>}\n      \n      <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n        <div>\n          <label htmlFor=\"title\" className=\"block text-lg font-medium text-gray-700 dark:text-gray-300 mb-2 flex items-center\">\n            <FaPen className=\"mr-2\"/> Title\n          </label>\n          <input\n            id=\"title\"\n            {...register(\'title\', { required: \'Title is required.\' })}\n            className=\"input-field\"\n          />\n          {errors.title && <p className=\"text-red-500 text-sm mt-1\">{errors.title.message}</p>}\n        </div>\n\n        <div>\n          <label htmlFor=\"category\" className=\"block text-lg font-medium text-gray-700 dark:text-gray-300 mb-2 flex items-center\">\n            <FaTag className=\"mr-2\"/> Category\n          </label>\n          <select \n            id=\"category\" \n            {...register(\'category\', { required: \'Category is required.\' })} \n            className=\"input-field\"\n            disabled={isLoadingCategories}\n          >\n            {isLoadingCategories ? (\n                <option>Loading categories...</option>\n            ) : (\n                categories?.map(cat => <option key={cat.id} value={cat.name}>{cat.name}</option>)\n            )}\n          </select>\n          {errors.category && <p className=\"text-red-500 text-sm mt-1\">{errors.category.message}</p>}\n        </div>\n\n        <div>\n          <label htmlFor=\"content\" className=\"block text-lg font-medium text-gray-700 dark:text-gray-300 mb-2 flex items-center\">\n            <FaFileAlt className=\"mr-2\"/> Content\n          </label>\n          <textarea\n            id=\"content\"\n            {...register(\'content\', { required: \'Content is required.\', minLength: { value: 10, message: \'Content must be at least 10 characters long.\' } })}\n            rows={10}\n            className=\"input-field\"\n          ></textarea>\n          {errors.content && <p className=\"text-red-500 text-sm mt-1\">{errors.content.message}</p>}\n        </div>\n\n        <div className=\"flex justify-end space-x-4\">\n            <button type=\"button\" onClick={() => navigate(-1)} className=\"px-6 py-2 rounded-lg text-gray-700 bg-gray-200 hover:bg-gray-300 dark:bg-gray-600 dark:text-gray-200 dark:hover:bg-gray-500\">\n                Cancel\n            </button>\n            <button type=\"submit\" disabled={isLoading} className=\"btn-primary\">\n                {isLoading ? \'Updating...\' : \'Update Post\'}\n            </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default EditPost;\n